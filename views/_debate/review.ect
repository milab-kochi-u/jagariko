<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>review</title>


    <!-- Optional theme -->

    <![endif]-->
    <script src="/tmp/angular.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/tmp/jquery-2.2.4.min.js" ></script>



    <script type="text/javascript" src="/tmp/angular-route.min.js"></script>
    <script src="/_debate/d3/d3.js"></script>

    <!--
    <link rel="stylesheet" href="/tmp/bootstrap.min.css">
    <link rel="stylesheet" href="/tmp/bootstrap-theme.min.css">
    <script src="/tmp/bootstrap.min.js"></script>
    -->

    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

    <!-- Optional theme -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">

    <!-- Latest compiled and minified JavaScript -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

</head>

<body ng-app="myApp">
    <div ng-controller="myCtr" class="container">




        <div class="row">
        <my-navy debate-info="debateInfo"></my-navy>
        </div>

        <div class="row">
                <table class="table table-striped">
                <tr class="info"><th>テーマ</th><td>{{debateInfo.title}}</td><td></td></tr>
                <tr class="warning"><th>総回数</th><td>{{debateInfo.config.timeNumbers}}</td><td></td></tr>
                <tr class="info"><th>賛成側</th><td>{{debateInfo.pro}}</td><td></td></tr>
                <tr class="success"><th>反対側</th><td>{{debateInfo.con}}</td><td></td></tr>
               </table>
        </div>


        <div class="row">

            <home-map>
            <div class="row">
              <div class="col-md-5" id="statementMap" style="height:950px">
                    <statement-map></statement-map>
              </div>

              <div class="col-md-7" id="debateMap" style="height:950px">
                    <debate-map gg="gg" focus-zoom-index="focusZoomIndex" time-numbers="debateInfo.config.timeNumbers"></debate-map>
              </div>
            </div>
            <home-map>



        </div>
    </div>
</body>


<script>

    var myApp = angular.module("myApp",[])

    myApp.run(function($rootScope) {
      $rootScope.range = function(n) {
        var arr = [];
        for (var i=0; i<n; ++i) arr.push(i);
        return arr;
      };
    });

    myApp.factory('coreSocket', function($rootScope) {
                //var socket = io.connect();
                var socket = io(window.location.host + "/_chat").connect()
                return {
                    on: function(eventName, callback) {
                        socket.on(eventName, function() {
                            var args = arguments;
                            $rootScope.$apply(function() {
                                callback.apply(socket, args);
                            });
                        });
                    },
                    emit: function(eventName, data, callback) {
                        socket.emit(eventName, data, function() {
                            var args = arguments;
                            $rootScope.$apply(function() {
                                if (callback) {
                                    callback.apply(socket, args);
                                }
                            });
                        });
                    }
                };
    });



    myApp.factory("myPost",function($http){
        return{
            postData:function(url,data){
                return $http.post(url,data).success(function(res){
                   return res;
                })
            }
        }
    })


    myApp.controller("myCtr",function($scope,$q,coreSocket,myPost){

            $scope.debateInfo = {}

            function _getDebateInformation(){

                    var deferred = $q.defer();

                    myPost.postData("/_debate/getDebateInformation").then(function(_res){

                    if(_res.data){
                            $scope.debateInfo.title = _res.data.title
                            $scope.debateInfo.pro = _res.data.pro
                            $scope.debateInfo.con = _res.data.con
                            $scope.debateInfo.group = _res.data.group
                            $scope.debateInfo.config = _res.data.config
                            $scope.debateInfo.username = _res.data.username
                            deferred.resolve({err:0,msg:"data acquired"});
                    }else{
                            deferred.reject({err:1,msg:"data not acquired"});
                    }

                    })

                    return deferred.promise;
            }

            function init(){
                 var promise = _getDebateInformation()
            }

            init()

            $scope.showInMap = function(index){
                $scope.focusZoomIndex = index

                d3.selectAll("table").style("border-color",null)

                var obj = d3.selectAll("g").filter(function(d){
                    if(!d) return;
                    return d._index == index && d.name == "claim"
                })

                if(obj.select("table").style("border-color").length == 16){
                   obj.select("table").style("border-color","")
                }else{
                   obj.select("table").style("border-color","yellow")
                }

            }

    })

    myApp.directive("myNavy",function(){
        return {
            scope:{debateInfo:"="},
            templateUrl:"/_debate/navy.html"
        }
    })

    myApp.directive("homeMap",function($rootScope){
        return {
            scope:false,
            controller:function($scope){

                this.ijkByIndex = function(index,data){

                                for(var i=0;i<data.length;i++){
                                    for(var j=0;j<data[i].objs.length;j++){
                                        for(var k=0;k<data[i].objs[j].length;k++){
                                                if( index == parseInt(data[i].objs[j][k].random)){
                                                    return {target:"i"+i+"j"+j+"k"+k,i:i,j:j,k:k}
                                                }


                                            for(var s=0;s<data[i].objs[j][k].warrant.length;s++){
                                                    if( index == parseInt(data[i].objs[j][k].warrant[s].random)){
                                                        return {target:"i"+i+"j"+j+"k"+k+"s"+s,i:i,j:j,k:k,s:s}
                                                    }


                                                for(var t=0;t<data[i].objs[j][k].warrant[s].evidence.length;t++){
                                                            if( index == parseInt(data[i].objs[j][k].warrant[s].evidence[t].random)){
                                                                return {target:"i"+i+"j"+j+"k"+k+"s"+s+"t"+t,i:i,j:j,k:k,s:s,t:t}
                                                            }

                                                }
                                            }
                                        }

                                    }
                                }

                                return {target:null}
                            }


                         this.ijkByRandom = function(random,data){

                                for(var i=0;i<data.length;i++){
                                    for(var j=0;j<data[i].objs.length;j++){
                                        for(var k=0;k<data[i].objs[j].length;k++){
                                                if( random == parseInt(data[i].objs[j][k].index)){
                                                    return {source:"i"+i+"j"+j+"k"+k,i:i,j:j,k:k}
                                                }
                                        }
                                    }
                                }

                                return {source:null}
                            }

            }
        }
    })


    myApp.directive("debateMap",function(myPost,$rootScope){
        return {
            require:"^?homeMap",
            scope:{focusZoomIndex:"=",timeNumbers:"="},
            controller:function($scope){

            $scope.range = $rootScope.range

            $scope.showSequence = function(n){
                $scope.showSequenceNum = n
                d3.selectAll("line").style("visibility","hidden")

                $scope.gg.style("visibility","hidden")

                d3.selectAll("line").filter(function(d){
                    return parseInt(d.order) == n;
                }).style("visibility","visible")

                $scope.gg.filter(function(d){
                      return parseInt(d.order) == n;
                }).style("visibility","visible")


                d3.selectAll("line").filter(function(d){
                   return d.connect
                }).style("visibility","hidden")

            }

            $scope.rebuild = function(){
                $scope.showSequenceNum = -1
                init()
                d3.selectAll(".rect,.links,.nodes").data([]).exit().remove()
            }

            init()


            $scope.$watch("focusZoomIndex",function(preVal,val){
                //focusOnParticularNode()
            })

/*
            function focusOnParticularNode(){
                var nodes = $scope.node._groups[0]
                console.log(nodes)
                //$scope.zoom.scaleTo($scope.rect,0)
                var color = d3.scaleOrdinal(d3.schemeCategory20);
                for(var i=0;i<nodes.length;i++){
                       d3.select(nodes[i]).attr("fill",color(d3.select(nodes[i]).attr("position")))
                       if(d3.select(nodes[i]).attr("index") == $scope.focusZoomIndex){
                            d3.select(nodes[i]).attr("fill","green")
                            //$scope.zoom.scaleBy(d3.select(nodes[i]),2.6)
                       }
                }
            }
*/

            function init(){

                myPost.postData("/_debate/fetchAnalysisLog").then(function(_res){

                                    graph = {
                                      "nodes": [
                                        //{"id": "Myriel", "group": 1},
                                        //{"id": "Napoleon", "group": 1},
                                        //{"id": "Mlle.Baptistine", "group": 1},
                                        //{"id": "Mme.Magloire", "group": 1},
                                      ],
                                      "links": [
                                        //{"source": "Myriel", "target": "Napoleon", "value": 1},
                                        //{"source": "Mlle.Baptistine", "target": "Napoleon", "value": 8},
                                        //{"source": "Mme.Magloire", "target": "Myriel", "value": 10},
                                      ]
                                    }

                                    graph = dealWithAnalysisLogData(_res.data)
                                    drawMap(graph)
                            })
            }



            function dealWithAnalysisLogData(data){

                    var nodes = []
                    var links = []

                    console.log("data is ...")
                    console.log(data)
                    for(var i=0;i<data.length;i++){
                        for(var j=0;j<data[i].objs.length;j++){
                            var user = {pro:data[i].pro,con:data[i].con}
                            for(var k=0;k<data[i].objs[j].length;k++){
                                if(parseInt(data[i].objs[j][k].index) > 10000){
                                    var target = $scope.ijkByIndex(data[i].objs[j][k].index,data)
                                    var _target = target.target
                                    var _target1 = target.target
                                    var _target2 = "i"+target.i+"j"+target.j+"k"+target.k
                                    var __target = _target1 + " " + _target2
                                    console.log(__target)
                                    links.push({user:user,connect:true,order:data[i].order,position:data[i].position,class:_target,"source":"i"+i+"j"+j+"k"+k,target:_target,"value":2})
                                    nodes.push({user:user,dissent:data[i].objs[j][k].dissent,extension:1,order:data[i].order,id:"i"+i+"j"+j+"k"+k,name:"claim",class:_target,group:data[i]._id,position:data[i].position,txt:data[i].objs[j][k].claimTxt,_index:data[i].objs[j][k].index})
                                }else{
                                    nodes.push({user:user,dissent:data[i].objs[j][k].dissent,extension:1,order:data[i].order,id:"i"+i+"j"+j+"k"+k,name:"claim",class:"i"+i+"j"+j+"k"+k,group:data[i]._id,position:data[i].position,txt:data[i].objs[j][k].claimTxt,_index:data[i].objs[j][k].index})
                                }


                                for(var s=0;s<data[i].objs[j][k].warrant.length;s++){
                                    var extension = $scope.ijkByRandom(data[i].objs[j][k].warrant[s].random,data).source?1:0
                                    nodes.push({user:user,dissent:data[i].objs[j][k].warrant[s].dissent,extension:extension,order:data[i].order,id:"i"+i+"j"+j+"k"+k+"s"+s,class:"i"+i+"j"+j+"k"+k,name:"warrant",group:data[i]._id,position:data[i].position,txt:data[i].objs[j][k].warrant[s].warrantTxt})
                                    links.push({user:user,order:data[i].order,position:data[i].position,class:"i"+i+"j"+j+"k"+k,"source":"i"+i+"j"+j+"k"+k+"s"+s,target:"i"+i+"j"+j+"k"+k,"value":2})
                                    for(var t=0;t<data[i].objs[j][k].warrant[s].evidence.length;t++){
                                        links.push({user:user,order:data[i].order,position:data[i].position,class:"i"+i+"j"+j+"k"+k,"source":"i"+i+"j"+j+"k"+k+"s"+s+"t"+t,"target":"i"+i+"j"+j+"k"+k+"s"+s,value:3})
                                        var extension = $scope.ijkByRandom(data[i].objs[j][k].warrant[s].evidence[t].random,data).source?1:0
                                        nodes.push({user:user,dissent:data[i].objs[j][k].warrant[s].evidence[t].dissent,extension:extension,order:data[i].order,id:"i"+i+"j"+j+"k"+k+"s"+s+"t"+t,class:"i"+i+"j"+j+"k"+k,name:"evidence",group:data[i]._id,position:data[i].position,txt:data[i].objs[j][k].warrant[s].evidence[t].evidenceTxt})
                                    }
                                }
                            }

                        }
                    }

                    graph = {nodes:nodes,links:links}
                    return graph
            }

            function drawMap(graph){

               var zoom = d3.zoom()
                            .scaleExtent([1, 100])
                            .on("zoom", zoomed);
                $scope.zoom = zoom

                function zoomed() {
                    svg.attr("transform",
                        d3.event.transform);
                }

                var svg = d3.selectAll("g").filter("#main"),

                    width = +d3.select("svg").attr("width"),
                    height = +d3.select("svg").attr("height");

                svg.call(zoom)

                var color = d3.scaleOrdinal(d3.schemeCategory20);

                var simulation = d3.forceSimulation()
                    .force("link", d3.forceLink().distance(250).strength(2).id(function(d) { return d.id; }))
                    .force("charge", d3.forceManyBody().distanceMin([0,5]))
                    .force("center", d3.forceCenter(width/2 , height/2 ));

                var rect = svg.append("rect")
                            .attr("class","rect")
                            .attr("x",0)
                            .attr("y",0)
                            .attr("width",10000)
                            .attr("height",10000)
                            .attr("fill","#fff");
                $scope.rect = rect



                  var link = svg.append("g")
                      .attr("class", "links")
                    .selectAll("line")
                    .data(graph.links)
                    .enter().append("line")
                    .attr("stroke-width",2)
                    .attr("class",function(d){
                        return d.class
                    })
                    .attr("connect",function(d){
                        return d.connect
                    })
                    .attr("position",function(d){
                        return d.position
                    })
                    .attr("order",function(d){
                        return d.order
                    })
                    .style("visibility","hidden")
                    .style("cursor","pointer")



                   var gg = svg.append("g")
                   .attr("class", "nodes")
                   .selectAll("g")
                   .data(graph.nodes)
                   .enter()
                   .append("g")
                   .call(d3.drag()
                   .on("start", dragstarted)
                   .on("drag", dragged)
                   .on("end", dragended))
                   .attr("visibility", function(d) {
                      return d.name=="claim"&&d._index<=10000?"visible":"hidden"
                   })
                   .attr("index",function(d){
                       return d._index
                   })
                   .attr("extend",1)
                   .attr("id",function(d){
                       return d.id
                   })
                   .attr("order",function(d){
                       return d.order
                   })
                   .attr("position",function(d){
                       return d.position
                   })
                   .attr("class",function(d){
                   return d.class
                   })
                   .attr("random",function(d){
                     return d.random
                   }).on("click",function(d){
                     var val = parseInt(d3.select(this).attr("extend"))
                     d3.select(this).attr("extend",val+1)


                     if(val%2 == 1){
                          d3.selectAll("g").filter(function(_d){
                                if(!_d) return false;
                                if($scope.showSequenceNum > 0){
                                    return _d.class == d.id && _d.order == $scope.showSequenceNum
                                }else{
                                    return _d.class == d.id
                                }
                          }).style("visibility","visible")

                         d3.selectAll("line").filter(function(_d){
                                if(!_d) return false;
                                if($scope.showSequenceNum > 0){
                                    return _d.class == d.id && _d.order == $scope.showSequenceNum
                                }else{
                                    return _d.class == d.id
                                }
                         }).style("visibility","visible")

                     }else{
                          d3.selectAll("g").filter(function(_d){
                             if(!_d) return false
                             if($scope.showSequenceNum > 0){
                                 return _d.class == d.id && _d.order == $scope.showSequenceNum
                             }else{
                                 return _d.class == d.id
                             }
                           }).style("visibility","hidden")

                         d3.selectAll("line").filter(function(_d){
                                if(!_d) return false;
                                if($scope.showSequenceNum > 0){
                                    return _d.class == d.id && _d.order == $scope.showSequenceNum
                                }else{
                                    return _d.class == d.id
                                }
                         }).style("visibility","hidden")


                          d3.select(this).style("visibility","visible")
                     }

                    })

                    $scope.gg = gg


                  var rects = gg.append('foreignObject')

                    .attr("x",-120)
                    .attr("y",-100)

                    var tables = rects.append('xhtml:div')
                    .append('table')
                    .style("width","250px")
                    .style("height","100px")
                    .attr("class","table table-bordered")

                    var tr1 = tables.append('tr')

                    var td1_1 = tr1.append("td")
                    .html(function(d){
                        switch(d.name){
                            case 'claim':return '主張';
                            case 'warrant':return '論拠';
                            case 'evidence':return '根拠';
                        }
                    })


                    var td1_2 = tr1.append("td")
                    .html(function(d){
                            if(d.dissent){
                             return "意義"
                            }
                    })



                    .attr("width","20%")

                    var tr2 = tables.append("tr")

                    var td2_1 = tr2.append("td")
                    .attr("colspan",2)
                    .html(function(d){
                        return d.txt.substring(1, 40) + "...<span _index='" + d._index + "' position='"+ d.position +"' pro='"+d.user.pro+"' con='"+d.user.con+"' name='"+d.name+"' txt='"+ d.txt +"' class='detail' >詳細</span>";
                    })
                    .attr("width","100%")
                    .attr("cx",350)


                    td2_1.selectAll(".detail").on("click",function(e){

                        d3.selectAll("g").filter(".popUp").style("visibility","visible")
                        d3.selectAll("g").filter(".popUp").selectAll("div").filter(".content").html(d3.select(this).attr("txt"))
                        var name = d3.select(this).attr("name")
                        var position = d3.select(this).attr("position")
                        var pro = d3.select(this).attr("pro")
                        var con = d3.select(this).attr("con")
                        var _index = d3.select(this).attr("_index")


                        d3.selectAll("g").filter(".popUp").selectAll("small").filter(".user").html(function(){

                            if(position == 1){
                                return "賛成側"+ pro + "->" + "反対側" + con
                            }else{
                                return "反対側"+ con + "->" + "賛成側" + pro
                            }

                        })

                        d3.selectAll("g").filter(".popUp").selectAll("span").filter(".name").html(function(){

                            switch(name){
                                case 'claim':
                                    if(_index>10000){
                                        return '主張(意義説明)'
                                    }else{
                                        return '主張(オリジナル)'
                                    }
                                break;
                                case 'warrant':
                                    return '論拠'
                                break;
                                case 'evidence':
                                    return '根拠'
                                break;
                            }
                        })

                    })
                    .style("cursor","pointer")



                  var text = gg.append("text").text(function(d){
                      return $scope.changeLayoutData==0?d.name:d.txt;
                  }).style("text-anchor", "middle")
                    .style("fill", "#555")
                    .style("font-family", "Arial")
                    .style("font-size", 12)
                    .style("fill", function(d) {
                        return "rgb(85, 85, 85)"
                    })
                    .attr("order",function(d){
                        return d.order
                    })
                    .style("visibility",function(d){
                        //return d.name=="claim"&&d._index<=10000?"visible":"hidden"
                        return "hidden"
                    })
                    .attr("class",function(d){
                        return d.class
                    })
                    .attr("id",function(d){
                        return d.id
                    })
                    .attr("y",20)





                  simulation
                      .nodes(graph.nodes)
                      .force("collide", d3.forceCollide().radius(function(d) { return 45 }))
                      .on("tick", ticked);

                  simulation.force("link")
                      .links(graph.links);

                  function ticked() {
                    link
                        .attr("x1", function(d) { return d.source.x-120; })
                        .attr("y1", function(d) { return d.source.y-100; })
                        .attr("x2", function(d) { return d.target.x; })
                        .attr("y2", function(d) { return d.target.y; });

                    gg
                        .attr("transform", function(d) { return "translate("+d.x+","+d.y+")" })
                        
                  }

                function dragstarted(d) {
                  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                  d.fx = d.x;
                  d.fy = d.y;
                }

                function dragged(d) {
                  d.fx = d3.event.x;
                  d.fy = d3.event.y;
                }

                function dragended(d) {
                  if (!d3.event.active) simulation.alphaTarget(0);
                  d.fx = null;
                  d.fy = null;
                }

                simulation.restart()

            }

            },
            link:function(scope,element,attrs,homeMap){
                    scope.width = document.getElementById("debateMap").offsetWidth
                    scope.height = document.getElementById("debateMap").offsetHeight
                    scope.ijkByIndex = homeMap.ijkByIndex
                    scope.ijkByRandom = homeMap.ijkByRandom
            },
            templateUrl:"/_debate/debateMap.html"
        }
    })

    myApp.directive("statementMap",function(myPost){
        return {
            require:"^?homeMap",
            scope:false,
            link:function(scope,element,attrs,homeMap){
                scope.ijkByIndex = homeMap.ijkByIndex
            },
            controller:function($scope){
                myPost.postData("/_debate/fetchStatementLog").then(function(_res){
                        $scope.statementList = _res.data
                        myPost.postData("/_debate/fetchAnalysisLog").then(function(_res){
                               for(var i=0;i<$scope.statementList.length;i++){
                                    if(!$scope.statementList[i].inputMessage) continue;
                                    for(var j=0;j<$scope.statementList[i].inputMessage.length;j++){
                                        if($scope.statementList[i].inputMessage[j].index > 10000){
                                            var s = $scope.ijkByIndex($scope.statementList[i].inputMessage[j].index,_res.data)

                                             if(!isNaN(s.i)){
                                                if(!isNaN(s.j)){
                                                    if(!isNaN(s.k)){
                                                        if(!isNaN(s.s)){
                                                            if(!isNaN(s.t)){
                                                                    //evidence
                                                                    $scope.statementList[i].inputMessage[j].dissentTxt = _res.data[s.i].objs[s.j][s.k].warrant[s.s].evidence[s.t].evidenceTxt
                                                            }else{
                                                                    //warrant
                                                                    $scope.statementList[i].inputMessage[j].dissentTxt = _res.data[s.i].objs[s.j][s.k].warrant[s.s].warrantTxt
                                                            }
                                                        }else{
                                                                    //claim
                                                                    $scope.statementList[i].inputMessage[j].dissentTxt = _res.data[s.i].objs[s.j][s.k].claimTxt
                                                        }
                                                    }
                                                }
                                             }
                                        }
                                    }
                               }


                        })


                })
            },
            templateUrl:"/_debate/statementMap.html"
        }
    })

    myApp.directive("svgComment",function(){
        return {
            scope:true,
            controller:function($scope){
                $scope.commentContentList = []
                $scope.showComment = 0
                $scope.makeSenseNum = 0
                $scope.makeLikeNum = 0
                $scope.glyphiconStarEmpty = true
                $scope.glyphiconStar = false
                $scope.closePopUp = function(){
                    d3.select("svg").selectAll("g").filter(".popUp").style("visibility","hidden")
                }

                $scope.doComment = function(){
                    $scope.showComment = $scope.showComment + 1

                    if($scope.showComment % 2 == 1){
                        d3.select("#popUpBackground").attr("height",750)
                    }else{
                        d3.select("#popUpBackground").attr("height",450)
                    }

                }

                $scope.submitComment = function(isValid){
                    if(!isValid) return;
                    $scope.commentContentList.push($scope.commentContent)
                }

                $scope.makeSense = function(){
                    $scope.makeSenseNum = $scope.makeSenseNum + 1
                    if($scope.makeSenseNum %2 == 0){
                        $scope.glyphiconStarEmpty = true
                        $scope.glyphiconStar = false
                    }else{
                        $scope.glyphiconStarEmpty = false
                        $scope.glyphiconStar = true
                    }
                }

                $scope.makeLike = function(){
                    $scope.makeLikeNum = $scope.makeLikeNum + 1
                }

            },
            templateUrl:"/_debate/svgComment.html"
        }
    })

</script>

</html>